{"version":3,"sources":["pivot_spec.coffee"],"names":[],"mappings":"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","file":"pivot_spec.js","sourceRoot":"/source/","sourcesContent":["fixtureData = [\n    [\"name\",    \"gender\",   \"colour\",    \"birthday\",     \"trials\",   \"successes\"],\n    [\"Nick\",    \"male\",     \"blue\",      \"1982-11-07\",   103,        12],\n    [\"Jane\",    \"female\",   \"red\",       \"1982-11-08\",   95,         25],\n    [\"John\",    \"male\",     \"blue\",      \"1982-12-08\",   112,        30],\n    [\"Carol\",   \"female\",   \"yellow\",    \"1983-12-08\",   102,        14]\n]\n\nraggedFixtureData = [\n    {name: \"Nick\", \"colour\": \"red\", \"age\": 34}\n    {name: \"Jane\", \"gender\": \"female\"}\n    {name: \"John\", \"gender\": \"male\", \"age\": 12}\n    {name: \"Jim\", \"gender\": null, \"age\": 12}\n]\n\ndescribe \"$.pivotUI()\", ->\n    describe \"with no rows/cols, default count aggregator, default TableRenderer\",  ->\n        table = null\n\n        beforeEach (done) ->\n            table = $(\"<div>\").pivotUI fixtureData, onRefresh: done\n        it \"has all the basic UI elements\", (done) ->\n            expect table.find(\"td.pvtAxisContainer\").length\n            .toBe  3\n            expect table.find(\"td.pvtRendererArea\").length\n            .toBe  1\n            expect table.find(\"td.pvtVals\").length\n            .toBe  1\n            expect table.find(\"select.pvtRenderer\").length\n            .toBe  1\n            expect table.find(\"select.pvtAggregator\").length\n            .toBe  1\n            expect table.find(\"span.pvtAttr\").length\n            .toBe  6\n            done()\n\n        it \"reflects its inputs\", (done) ->\n            expect table.find(\"td.pvtUnused span.pvtAttr\").length\n            .toBe  6\n            expect table.find(\"select.pvtRenderer\").val()\n            .toBe  \"Table\"\n            expect table.find(\"select.pvtAggregator\").val()\n            .toBe  \"Count\"\n            done()\n\n        it \"renders a table\", (done) ->\n            expect table.find(\"table.pvtTable\").length\n            .toBe  1\n            done()\n\n\n        describe \"its renderer output\", ->\n            it \"has the correct type and number of cells\", (done) ->\n                expect table.find(\"th.pvtTotalLabel\").length\n                .toBe  1\n                expect table.find(\"td.pvtGrandTotal\").length\n                .toBe  1\n                done()\n\n            it \"has the correct textual representation\", (done) ->\n                expect table.find(\"table.pvtTable\").text()\n                .toBe [\"Totals\", \"4\"].join(\"\")\n                done()\n\n            it \"has a correct grand total with data value\", (done) ->\n                expect table.find(\"td.pvtGrandTotal\").text()\n                .toBe  \"4\"\n                expect table.find(\"td.pvtGrandTotal\").data(\"value\")\n                .toBe  4\n                done()\n\n    describe \"with rows/cols, sum-over-sum aggregator, Heatmap renderer\",  ->\n        table = null\n\n        beforeEach (done) ->\n            table = $(\"<div>\").pivotUI fixtureData,\n                rows: [\"gender\"], cols: [\"colour\"]\n                aggregatorName: \"Sum over Sum\"\n                vals: [\"successes\", \"trials\"]\n                rendererName: \"Heatmap\"\n                onRefresh: done\n\n        it \"has all the basic UI elements\", (done) ->\n            expect table.find(\"td.pvtAxisContainer\").length\n            .toBe  3\n            expect table.find(\"td.pvtRendererArea\").length\n            .toBe  1\n            expect table.find(\"td.pvtVals\").length\n            .toBe  1\n            expect table.find(\"select.pvtRenderer\").length\n            .toBe  1\n            expect table.find(\"select.pvtAggregator\").length\n            .toBe  1\n            expect table.find(\"span.pvtAttr\").length\n            .toBe  6\n            done()\n\n        it \"reflects its inputs\", (done) ->\n            expect table.find(\"td.pvtUnused span.pvtAttr\").length\n            .toBe  4\n            expect table.find(\"td.pvtRows span.pvtAttr\").length\n            .toBe  1\n            expect table.find(\"td.pvtCols span.pvtAttr\").length\n            .toBe  1\n            expect table.find(\"select.pvtRenderer\").val()\n            .toBe  \"Heatmap\"\n            expect table.find(\"select.pvtAggregator\").val()\n            .toBe  \"Sum over Sum\"\n            done()\n\n        it \"renders a table\", (done) ->\n            expect table.find(\"table.pvtTable\").length\n            .toBe  1\n            done()\n\n        describe \"its renderer output\", ->\n            it \"has the correct type and number of cells\", (done) ->\n                expect table.find(\"th.pvtAxisLabel\").length\n                .toBe  2\n                expect table.find(\"th.pvtRowLabel\").length\n                .toBe  2\n                expect table.find(\"th.pvtColLabel\").length\n                .toBe  3\n                expect table.find(\"th.pvtTotalLabel\").length\n                .toBe  2\n                expect table.find(\"td.pvtVal\").length\n                .toBe  6\n                expect table.find(\"td.pvtTotal\").length\n                .toBe  5\n                expect table.find(\"td.pvtGrandTotal\").length\n                .toBe  1\n                done()\n\n            it \"has the correct textual representation\", (done) ->\n                expect table.find(\"table.pvtTable\").text()\n                .toBe [\n                    \"colour\",   \"blue\", \"red\",  \"yellow\",   \"Totals\",\n                    \"gender\",\n                    \"female\",           \"0.26\", \"0.14\",     \"0.20\",\n                    \"male\",     \"0.20\",                     \"0.20\",\n                    \"Totals\",   \"0.20\", \"0.26\", \"0.14\",     \"0.20\"\n                    ].join(\"\")\n                done()\n\n            it \"has a correct spot-checked cell with data value\", (done) ->\n                expect table.find(\"td.col0.row1\").text()\n                .toBe  \"0.20\"\n                expect table.find(\"td.col0.row1\").data(\"value\")\n                .toBe  (12+30)/(103+112)\n                done()\n\n    describe \"with ragged input\",  ->\n        table = $(\"<div>\").pivotUI raggedFixtureData, rows: [\"gender\"], cols: [\"age\"]\n\n        it \"renders a table with the correct textual representation\", ->\n            expect table.find(\"table.pvtTable\").text()\n            .toBe [\n                \"age\",     \"12\",  \"34\",  \"null\",  \"Totals\"\n                \"gender\",\n                \"female\",                 \"1\",    \"1\"\n                \"male\",    \"1\",                   \"1\"\n                \"null\",    \"1\",    \"1\",           \"2\"\n                \"Totals\",  \"2\",    \"1\",   \"1\",    \"4\"\n                ].join(\"\")\n\ndescribe \"$.pivot()\", ->\n\n    describe \"with no rows/cols, default count aggregator, default TableRenderer\",  ->\n        table = $(\"<div>\").pivot fixtureData\n\n        it \"renders a table\", ->\n            expect table.find(\"table.pvtTable\").length\n            .toBe  1\n\n        describe \"its renderer output\", ->\n\n            it \"has the correct textual representation\", ->\n                expect table.find(\"table.pvtTable\").text()\n                .toBe [\"Totals\", \"4\"].join(\"\")\n\n            it \"has a correct grand total with data value\", ->\n                expect table.find(\"td.pvtGrandTotal\").text()\n                .toBe  \"4\"\n                expect table.find(\"td.pvtGrandTotal\").data(\"value\")\n                .toBe  4\n\n    describe \"with rows/cols, sum aggregator, derivedAttributes, filter and sorters\",  ->\n        {sortAs, derivers, aggregators} = $.pivotUtilities\n        table = $(\"<div>\").pivot fixtureData,\n            rows: [\"gender\"], cols: [\"birthyear\"], aggregator: aggregators[\"Sum\"]([\"trialbins\"])\n            filter: (record) -> record.name != \"Nick\"\n            derivedAttributes:\n                birthyear: derivers.dateFormat \"birthday\", \"%y\"\n                trialbins: derivers.bin \"trials\", 10\n            sorters: (attr) ->\n                if attr == \"gender\" then return sortAs([\"male\", \"female\"])\n\n        it \"renders a table with the correct textual representation\", ->\n            expect table.find(\"table.pvtTable\").text()\n            .toBe [\n                \"birthyear\",    \"1982\",     \"1983\",     \"Totals\"\n                \"gender\",\n                \"male\",         \"110.00\",               \"110.00\"\n                \"female\",       \"90.00\",    \"100.00\",   \"190.00\"\n                \"Totals\",       \"200.00\",   \"100.00\",   \"300.00\"\n                ].join(\"\")\n\n    describe \"with rows/cols, fraction-of aggregator\",  ->\n        {aggregators} = $.pivotUtilities\n        table = $(\"<div>\").pivot fixtureData,\n            rows: [\"gender\"]\n            aggregator: aggregators[\"Sum as Fraction of Total\"]([\"trials\"])\n\n        it \"renders a table with the correct textual representation\", ->\n            expect table.find(\"table.pvtTable\").text()\n            .toBe [\n                \"gender\",  \"Totals\"\n                \"female\",  \"47.8%\"\n                \"male\",    \"52.2%\"\n                \"Totals\",  \"100.0%\"\n                ].join(\"\")\n\n    describe \"with rows/cols, custom aggregator, custom renderer with options\",  ->\n        received_PivotData = null\n        received_rendererOptions = null\n\n        table = $(\"<div>\").pivot fixtureData,\n            rows: [\"name\", \"colour\"], cols: [\"trials\", \"successes\"]\n            aggregator: ->\n                count2x: 0\n                push: -> @count2x +=2\n                value: -> @count2x\n                format: (x) -> \"formatted \" + x\n            renderer: (a,b) ->\n                received_PivotData = a\n                received_rendererOptions = b\n                return $(\"<div>\").addClass(b.greeting).text(\"world\")\n            rendererOptions: {greeting:\"hithere\"}\n\n        it \"renders the custom renderer as per options\", ->\n            expect table.find(\"div.hithere\").length\n            .toBe  1\n\n        describe \"its received PivotData object\", ->\n            it \"has a correct grand total value and format for custom aggregator\", ->\n                agg = received_PivotData.getAggregator([],[])\n                val = agg.value()\n                expect(val).toBe 8\n                expect(agg.format(val)).toBe \"formatted 8\"\n\n\n    describe \"with ragged input\",  ->\n        table = $(\"<div>\").pivot raggedFixtureData, rows: [\"gender\"], cols: [\"age\"]\n\n        it \"renders a table with the correct textual representation\", ->\n            expect table.find(\"table.pvtTable\").text()\n            .toBe [\n                \"age\",     \"12\",  \"34\",  \"null\",  \"Totals\"\n                \"gender\",\n                \"female\",                 \"1\",    \"1\"\n                \"male\",    \"1\",                   \"1\"\n                \"null\",    \"1\",    \"1\",           \"2\"\n                \"Totals\",  \"2\",    \"1\",   \"1\",    \"4\"\n                ].join(\"\")\n\ndescribe \"$.pivotUtilities\", ->\n\n    describe \".PivotData()\", ->\n        sumOverSumOpts =\n            aggregator: $.pivotUtilities.aggregators[\"Sum over Sum\"]([\"a\",\"b\"])\n\n        describe \"with no options\", ->\n            aoaInput =  [ [\"a\",\"b\"], [1,2], [3,4] ]\n            pd = new $.pivotUtilities.PivotData aoaInput\n\n            it \"has the correct grand total value\", ->\n                expect pd.getAggregator([],[]).value()\n                .toBe 2\n\n        describe \"with array-of-array input\", ->\n            aoaInput =  [ [\"a\",\"b\"], [1,2], [3,4] ]\n            pd = new $.pivotUtilities.PivotData aoaInput, sumOverSumOpts\n\n            it \"has the correct grand total value\", ->\n                expect pd.getAggregator([],[]).value()\n                .toBe (1+3)/(2+4)\n\n        describe \"with array-of-object input\", ->\n            aosInput =  [ {a:1, b:2}, {a:3, b:4} ]\n            pd = new $.pivotUtilities.PivotData aosInput, sumOverSumOpts\n\n            it \"has the correct grand total value\", ->\n                expect pd.getAggregator([],[]).value()\n                .toBe (1+3)/(2+4)\n\n        describe \"with ragged array-of-object input\", ->\n            raggedAosInput =  [ {a:1}, {b:4}, {a: 3, b: 2} ]\n            pd = new $.pivotUtilities.PivotData raggedAosInput, sumOverSumOpts\n\n            it \"has the correct grand total value\", ->\n                expect pd.getAggregator([],[]).value()\n                .toBe (1+3)/(2+4)\n\n        describe \"with function input\", ->\n            functionInput = (record) ->\n                record a:1, b:2\n                record a:3, b:4\n            pd = new $.pivotUtilities.PivotData functionInput, sumOverSumOpts\n\n            it \"has the correct grand total value\", ->\n                expect pd.getAggregator([],[]).value()\n                .toBe (1+3)/(2+4)\n\n        describe \"with jQuery table element input\", ->\n            tableInput = $ \"\"\"\n                <table>\n                    <thead>\n                        <tr> <th>a</th><th>b</th> </tr>\n                    </thead>\n                    <tbody>\n                        <tr> <td>1</td> <td>2</td> </tr>\n                        <tr> <td>3</td> <td>4</td> </tr>\n                    </tbody>\n                </table>\n                \"\"\"\n            pd = new $.pivotUtilities.PivotData tableInput, sumOverSumOpts\n\n            it \"has the correct grand total value\", ->\n                expect pd.getAggregator([],[]).value()\n                .toBe (1+3)/(2+4)\n\n\n        describe \"with rows/cols\", ->\n            pd = new $.pivotUtilities.PivotData fixtureData,\n                rows: [\"name\", \"colour\"],\n                cols: [\"trials\", \"successes\"]\n\n            it \"has correctly-ordered row keys\", ->\n                expect pd.getRowKeys()\n                .toEqual [ [ 'Carol', 'yellow' ], [ 'Jane', 'red' ], [ 'John', 'blue' ], [ 'Nick', 'blue' ] ]\n\n            it \"has correctly-ordered col keys\", ->\n                expect pd.getColKeys()\n                .toEqual [ [ 95, 25 ], [ 102, 14 ], [ 103, 12 ], [ 112, 30 ] ]\n\n            it \"can be iterated over\", ->\n                numNotNull = 0\n                numNull = 0\n                for r in pd.getRowKeys()\n                    for c in pd.getColKeys()\n                        if pd.getAggregator(r, c).value()?\n                            numNotNull++\n                        else\n                            numNull++\n                expect numNotNull\n                .toBe 4\n                expect numNull\n                .toBe 12\n\n            it \"returns matching records\", ->\n                records = []\n                pd.forEachMatchingRecord gender: \"male\", (x) -> records.push(x.name)\n                expect records\n                .toEqual [\"Nick\", \"John\"]\n\n            it \"has a correct spot-checked aggregator\", ->\n                agg = pd.getAggregator([ 'Carol', 'yellow' ],[ 102, 14 ])\n                val = agg.value()\n                expect(val).toBe 1\n                expect(agg.format(val)).toBe \"1\"\n\n            it \"has a correct grand total aggregator\", ->\n                agg = pd.getAggregator([],[])\n                val = agg.value()\n                expect(val).toBe 4\n                expect(agg.format(val)).toBe \"4\"\n\n    describe \".aggregatorTemplates\", ->\n\n        getVal = (aggregator) ->\n            pd = new $.pivotUtilities.PivotData(fixtureData, {aggregator})\n            return pd.getAggregator([],[]).value()\n        tpl = $.pivotUtilities.aggregatorTemplates\n\n        describe \".count\", ->\n            it \"works\", ->\n                expect getVal(tpl.count()())\n                .toBe 4\n\n        describe \".countUnique\", ->\n            it \"works\", ->\n                expect getVal(tpl.countUnique()(['gender']))\n                .toBe 2\n\n        describe \".listUnique\", ->\n            it \"works\", ->\n                expect getVal(tpl.listUnique()(['gender']))\n                .toBe 'male,female'\n\n        describe \".average\", ->\n            it \"works\", ->\n                expect getVal(tpl.average()(['trials']))\n                .toBe 103\n\n        describe \".sum\", ->\n            it \"works\", ->\n                expect getVal(tpl.sum()(['trials']))\n                .toBe 412\n\n        describe \".min\", ->\n            it \"works\", ->\n                expect getVal(tpl.min()(['trials']))\n                .toBe 95\n\n        describe \".max\", ->\n            it \"works\", ->\n                expect getVal(tpl.max()(['trials']))\n                .toBe 112\n\n        describe \".first\", ->\n            it \"works\", ->\n                expect getVal(tpl.first()(['name']))\n                .toBe 'Carol'\n\n        describe \".last\", ->\n            it \"works\", ->\n                expect getVal(tpl.last()(['name']))\n                .toBe 'Nick'\n\n        describe \".average\", ->\n            it \"works\", ->\n                expect getVal(tpl.average()(['trials']))\n                .toBe 103\n\n        describe \".median\", ->\n            it \"works\", ->\n                expect getVal(tpl.median()(['trials']))\n                .toBe 102.5\n\n        describe \".quantile\", ->\n            it \"works\", ->\n                expect getVal(tpl.quantile(0)(['trials']))\n                .toBe 95\n                expect getVal(tpl.quantile(0.1)(['trials']))\n                .toBe 98.5\n                expect getVal(tpl.quantile(0.25)(['trials']))\n                .toBe 98.5\n                expect getVal(tpl.quantile(1/3)(['trials']))\n                .toBe 102\n                expect getVal(tpl.quantile(1)(['trials']))\n                .toBe 112\n\n        describe \".var\", ->\n            it \"works\", ->\n                expect getVal(tpl.var()(['trials']))\n                .toBe 48.666666666666686\n\n        describe \".stdev\", ->\n            it \"works\", ->\n                expect getVal(tpl.stdev()(['trials']))\n                .toBe 6.976149845485451\n\n        describe \".sumOverSum\", ->\n            it \"works\", ->\n                expect getVal(tpl.sumOverSum()(['successes', 'trials']))\n                .toBe (12+25+30+14)/(95+102+103+112)\n\n    describe \".naturalSort()\", ->\n        naturalSort = $.pivotUtilities.naturalSort\n\n        sortedArr = [\n            null, NaN,\n            -Infinity, '-Infinity', -3, '-3', -2, '-2', -1, '-1',\n            0, '2e-1', 1, '01', '1', 2, '002', '002e0', '02', '2', '2e-0',\n            3, 10, '10', '11', '12', '1e2', '112', Infinity, 'Infinity',\n            '1a', '2a','12a','20a',\n            'A', 'A', 'NaN', 'a', 'a',\n            'a01', 'a012', 'a02', 'a1', 'a2', 'a12', 'a12', 'a21', 'a21',\n            'b', 'c', 'd', 'null'\n        ]\n\n        it \"sorts naturally (null, NaN, numbers & numbery strings, Alphanum for text strings)\", ->\n            expect sortedArr.slice().sort(naturalSort)\n            .toEqual sortedArr\n\n    describe \".sortAs()\", ->\n        sortAs = $.pivotUtilities.sortAs\n\n        it \"sorts with unknown values sorted at the end\", ->\n            expect [5,2,3,4,1].sort sortAs([4,3,2])\n            .toEqual [4,3,2,1,5]\n\n        it \"sorts lowercase after uppercase\", ->\n            expect [\"Ab\",\"aA\",\"aa\",\"ab\"].sort sortAs([\"Ab\",\"Aa\"])\n            .toEqual [\"Ab\",\"ab\",\"aa\",\"aA\"]\n\n    describe \".numberFormat()\", ->\n        numberFormat = $.pivotUtilities.numberFormat\n\n        it \"formats numbers\", ->\n            nf = numberFormat()\n            expect nf 1234567.89123456\n            .toEqual \"1,234,567.89\"\n\n        it \"formats booleans\", ->\n            nf = numberFormat()\n            expect nf true\n            .toEqual \"1.00\"\n\n        it \"formats numbers in strings\", ->\n            nf = numberFormat()\n            expect nf \"1234567.89123456\"\n            .toEqual \"1,234,567.89\"\n\n        it \"doesn't formats strings\", ->\n            nf = numberFormat()\n            expect nf \"hi there\"\n            .toEqual \"\"\n\n        it \"doesn't formats objects\", ->\n            nf = numberFormat()\n            expect nf {a:1}\n            .toEqual \"\"\n\n        it \"formats percentages\", ->\n            nf = numberFormat(scaler: 100, suffix: \"%\")\n            expect nf 0.12345\n            .toEqual \"12.35%\"\n\n        it \"adds separators\", ->\n            nf = numberFormat(thousandsSep: \"a\", decimalSep: \"b\")\n            expect nf 1234567.89123456\n            .toEqual \"1a234a567b89\"\n\n        it \"adds prefixes and suffixes\", ->\n            nf = numberFormat(prefix: \"a\", suffix: \"b\")\n            expect nf 1234567.89123456\n            .toEqual \"a1,234,567.89b\"\n\n        it \"scales and rounds\", ->\n            nf = numberFormat(digitsAfterDecimal: 3, scaler: 1000)\n            expect nf 1234567.89123456\n            .toEqual \"1,234,567,891.235\"\n\n        it \"shows and hides zero\", ->\n            nf = numberFormat(showZero: true)\n            expect nf 0\n            .toEqual \"0.00\"\n\n            nf = numberFormat(showZero: false)\n            expect nf 0\n            .toEqual \"\"\n\n    describe \".derivers\", ->\n        describe \".dateFormat()\", ->\n            df = $.pivotUtilities.derivers.dateFormat \"x\", \"abc % %% %%% %a %y %m %n %d %w %x %H %M %S\", true\n\n            it \"formats date objects\", ->\n                expect df {x: new Date(\"2015-01-02T23:43:11Z\")}\n                .toBe 'abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11'\n\n            it \"formats input parsed by Date.parse()\", ->\n                expect df {x: \"2015-01-02T23:43:11Z\"}\n                .toBe 'abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11'\n\n                expect df {x: \"bla\"}\n                .toBe ''\n\n        describe \".bin()\", ->\n            binner = $.pivotUtilities.derivers.bin \"x\", 10\n\n            it \"bins numbers\", ->\n                expect binner {x: 11}\n                .toBe 10\n\n                expect binner {x: 9}\n                .toBe 0\n\n                expect binner {x: 111}\n                .toBe 110\n\n            it \"bins booleans\", ->\n                expect binner {x: true}\n                .toBe 0\n\n            it \"bins negative numbers\", ->\n                expect binner {x: -12}\n                .toBe -10\n\n            it \"doesn't bin strings\", ->\n                expect binner {x: \"a\"}\n                .toBeNaN()\n\n            it \"doesn't bin objects\", ->\n                expect binner {x: {a:1}}\n                .toBeNaN()\n"]}